#!/usr/bin/env ruby

# This program allows you to use Jabber to notify your developers what happened with their tests.
# It makes the following assumptions:
#
#   * you are using git
#   * your "version" output is a git hash or in "githash-suffix" format
#   * you have a "ci_jabber_bot" script running on an accessable host
#   * the script is being run in an up-to-date git repository that matches the report
#
# Usage:
#   test_blame2jabber <config.yml> <jabber-bot URI> <report file> <CI URL>
#     e.g.
#   test_blame2jabber config.yml druby://127.0.0.1:5233 /some/directory/reports.json http://ci.mydomain.com/
#
# Note that this script requires the ENTIRE reports.json file, not just the
# most recent report.  It does not accept the report on standard input like the
# conclusion script, but it can be run from there.
#
# The config.yml file contains the following (all optional):
#
# ---
# whitelist:
#   - good.domain
#   - other.domain
# aliases:
#   bad.domain: good.domain
#   other.bad.domain: good.domain
# authors:
#   John Smith: jsmith@good.domain
#   Author Guy: aguy@other.domain
#
# The whitelist limits what domains to allow Jabber messages to.
# (No whitelist means no limit.)
#
# The aliases map domains to other domains.  For example, if
# user@bad.domain is a valid email and is used in your git commit
# messages, but only user@good.domain accepts Jabber messages, you
# would use the first alias above.  Make sure the alias target is
# listed in the whitelist!
#
# The authors map names to email addresses.  It doesn't need to be
# comprehensive, but if you're having trouble because someone uses a
# domain that isn't whitelisted or aliased, this can be used to get
# messages to them.  Make sure the domains are whitelisted or aliased.

require 'drb'

require 'rubygems'
require 'json'

class Array
  def index_many_by
    hash = {}
    each do |obj|
      key = yield obj
      if hash.has_key?(key)
        hash[key] << obj
      else
        hash[key] = [obj]
      end
    end
    hash
  end
  
  def sum
    inject(0) {|sum, obj| sum + obj}
  end
end

class Blamer
  class Config
    def initialize(file)
      data = YAML.load_file(file)
      @whitelist = data['whitelist'] || []
      @aliases   = data['aliases']   || {}

      preload_authors(data['authors'] || {})
    end

    def jabber_domain_for(domain)
      new_domain = @aliases[domain] || domain
      return nil unless @whitelist.empty? || @whitelist.include?(new_domain)
      new_domain
    end
    
    def preload_authors(authors)
      authors.each do |name, email|
        CommitAuthor.find_or_create("#{name} <#{email}>")
      end
    end
  end

  class Report
    attr_accessor :ref, :pass
    
    def pass?
      @pass
    end
  end

  class CommitBatch
    def initialize(commits)
      @commits = commits
    end
    
    def authors
      by_author.keys
    end
    
    def commits_for(author)
      by_author[author]
    end
    
    def by_author
      @by_author ||= @commits.index_many_by(&:author)
    end
    
    def percent_changed(author)
      100.0 * by_author[author].map(&:change_metric).sum / total_changes
    end
    
    def all_percents_changed
      by_author.collect do |author, commits|
        [author, percent_changed(author)]
      end.sort_by {|auth, perc| -1 * perc}
    end

    def total_changes
      @total_changes ||= @commits.map(&:change_metric).sum
    end
  end

  class CommitAuthor
    attr_reader :emails, :full
    
    def self.find_or_create(addr)
      author = new(addr)
      
      @@authors ||= {}
      found = @@authors[author.name]
      if found
        found.merge(author)
        found
      else
        @@authors[author.name] = author
        author
      end
    end
    
    def initialize(addr)
      if addr =~ /^([^<@>]+)\s+<([^<@>]+@[^<@>]+)>$/
        @name   = $1
        @emails = [$2]
        @full   = addr
      else
        @name = @full = addr
        @emails = [addr].to_set
      end
    end

    def name(other = nil)
      other == self ? 'You' : @name
    end
    
    def merge(other)
      @emails = (@emails + other.emails).uniq
    end
    
    def email
      @emails.first
    end
    
    def jabber_email(config)
      @emails.each do |email|
        user,  domain = email.split('@', 2)
        jabber_domain = config.jabber_domain_for(domain)
        return [user, jabber_domain].join('@') if jabber_domain
      end
      nil
    end
  end

  class Commit
    attr_reader :ref
    attr_accessor :author, :description, :additions, :deletions
    def initialize(ref)
      @ref = ref
      @additions = @deletions = 0
    end

    def change_metric
      @additions + (@deletions / 2)
    end
    
    def short_ref
      ref[0,8]
    end
    
    def listing
      "#{short_ref}: #{description}"
    end
  end

  class ReportNotFoundError; end
  
  def initialize(config_file, jabber_uri, reports_file, ci_url)
    @config  = Config.new(config_file)
    @reports = JSON.parse(File.read(reports_file)).map {|r| parse_report(r) }
    @jabber  = DRbObject.new(nil, jabber_uri)
    @ci_url  = ci_url

    batch = commit_batch
    batch.authors.each do |author|
      send_message(author, batch)
    end
  end
  
  def send_message(author, batch)
    jabber_email = author.jabber_email(@config)
    return if jabber_email.nil?
    
    commits = batch.commits_for(author)
    commit_text = commits.map(&:listing).join("\n")
    
    t_commits = commits.count == 1 ? 'commit' : 'commits'
    t_have    = commits.count == 1 ? 'has' : 'have'

    message = case status
    when :passing
      "The following #{t_commits} #{t_have} passed CI on #{@project_name}:\n\n#{commit_text}"
    when :just_passed
      "The following #{t_commits} #{t_have} fixed CI on #{@project_name}.  Thanks!\n\n#{commit_text}"
    when :just_failed
      if batch.percent_changed(author) == 100
        "Your #{t_commits} #{t_have} BROKEN the #{@project_name} build!  Please fix or revert this ASAP.\n\n#{commit_text}"
      else
        percents_text = batch.all_percents_changed.map { |a, p| "#{a.name(author)}: #{p.round}%" }.join("\n")
        "Your #{t_commits} may have broken the #{@project_name} build.  " +
          "Please identify the problem ASAP.\n\n#{commit_text}\n\n" +
          "Possible culprits:\n\n#{percents_text}"
      end
    when :failing
      index = last_index_with_status(:just_failed)

      failed_text =
        if index.nil?
          "CI for #{@project_name} has been broken for at least #{@reports.count} builds.  Please fix it soon!"
        else
          failed_batch = commit_batch(index)
          percents = failed_batch.all_percents_changed
          
          if percents.count == 1
            failed_author = percents[0][0]
            if failed_author == author
              t_failed_commits = failed_batch.commits_for(failed_author).count == 1 ? 'commit' : 'commits'
              "You are responsible for the initial failure.  Please fix or revert your failing #{t_failed_commits} ASAP."
            else
              "#{failed_author.name} is responsible for the initial failure.  Please nag them about this."
            end
          else
            percents_text = percents.map {|a, p| "#{a.name(author)}: #{p.round}%" }.join("\n")
            "These are the likely candidates for the initial failure.  Please nag them about this.\n\n#{percents_text}"
          end
        end

      "The following #{t_commits} #{t_have} have NOT fixed CI on #{@project_name}:\n\n#{commit_text}\n\n#{failed_text}"
    end
    
    url = [@ci_url, '#', @project_name.gsub('.', ''), '-', @reports.last.ref].join
    message += "\n\n#{url}"
    
    @jabber.deliver(jabber_email, message)
  end

  private
  
  def parse_report(data)
    report = Report.new
    @project_name ||= data['project_name']
    report.ref  = data['version']['output'].split('-', 2).first
    report.pass = ['update', 'test'].map {|key| successful_exit_status(data[key]['exit_status'])}.all?
    report
  end

  def successful_exit_status(stat)
    stat == '0' || stat == '123' # softfail
  end

  def reports_at(index)
    current = @reports[index]     or raise ReportNotFoundError
    prior   = @reports[index - 1] or raise ReportNotFoundError
    [current, prior]
  end
  
  def status(index = -1)
    current, prior = reports_at(index)

    if current.pass
      prior.pass ? :passing : :just_passed
    else
      prior.pass ? :just_failed : :failing
    end
  end
    
  def last_index_with_status(stat)
    (@reports.count - 1).downto(1) do |index|
      return index if status(index) == stat
    end
    nil
  end

  def commit_batch(index = -1)
    current, prior = reports_at(index)
    
    IO.popen('-', 'r') do |fh|
      if fh.nil?
        exec('git', 'log', "#{prior.ref}..#{current.ref}", '--numstat')
        raise 'exec failed'
      else
        return parse_commit_batch(fh)
      end
    end
  end

  def parse_commit_batch(fh)
    commits = []
    pending = nil
    
    fh.each_line do |line|
      case line.chomp
      when /^commit /
        commits << pending if pending
        pending = Commit.new($')
      when /^Author: /
        pending.author = CommitAuthor.find_or_create($')
      when /^\s{4,}/
        desc = $'.strip
        pending.description ||= desc unless desc.empty?
      when /^(\d+)\s+(\d+)\s+/
        pending.additions += $1.to_i
        pending.deletions += $2.to_i
      end
    end
    
    commits << pending if pending
    CommitBatch.new(commits)
  end
end

Blamer.new(*ARGV)
