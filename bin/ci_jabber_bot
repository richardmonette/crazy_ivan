#!/usr/bin/env ruby

# This code is designed to run a generic outbound-only Jabber bot.
# The test_blame2jabber script can be used to connect to this
# and send messages to individual users when CI builds fail.
#
# The xmpp4r-simple gem is required.
#
# Usage: jabber-bot <config.yml>
#
# Example config.yml file:
#
# :jabber_id: my.bot@gmail.com
# :password:  my.bot.password
# :druby_uri: druby://localhost:5223

require 'drb'
require 'thwait'
require 'yaml'

require 'rubygems'
require 'xmpp4r'
require 'xmpp4r/roster'

$stdout.sync = true # logging

class JabberBot
  def self.launch_config(file)
    config = YAML.load_file(file)
    launch(config[:jabber_id], config[:password], config[:druby_uri])
  end

  def self.launch(jabber_id, password, druby_uri)
    client = Client.new(jabber_id)
    server = Server.new(client, druby_uri)
    
    puts "JabberBot is starting."

    Thread.abort_on_exception = true
    client.connect(password)
    server.start

    puts "JabberBot is ready."

    server.thread.join
    
    puts "JabberBot is exiting."
  end
end

class JabberBot::Client
  attr_reader :thread

  def initialize(jabber_id)
    jid = Jabber::JID.new(jabber_id)
    @jabber = Jabber::Client.new(jabber_id)
    @deferred = {}
  end

  def connect(password)
    @jabber.connect
    @jabber.auth(password)
    @jabber.send(Jabber::Presence.new.set_type(:available))
    @roster = Jabber::Roster::Helper.new(@jabber)

    @jabber.add_message_callback do |msg|
      message_received(msg)
    end
    @roster.add_subscription_request_callback do |roster_item, presence|
      @roster.accept_subscription(presence.from)
    end

    @roster.add_subscription_callback do |roster_item, presence|
      flush_deferred_queue(presence.from)
    end
    @roster.add_update_callback do |roster_item, presence|
      flush_deferred_queue(presence.jid)
    end
  end

  def deliver(email, body)
    jid = Jabber::JID.new(email)
    msg = Jabber::Message.new(jid, body)
    msg.type = :chat

    if subscribed_to?(jid)
      send_message(msg)
    else
      (@deferred[jid] ||= []) << msg
      add_contact(jid)
    end
  end

  private
  
  def send_message(msg)
    @jabber.send(msg)
    puts "Sent message to #{msg.to}: #{msg.body.inspect}"
  end
  
  def subscribed_to?(jid)
    if item = @roster.items[jid]
      [:to, :both].include?(item.subscription)
    else
      false
    end
  end

  def add_contact(jid)
    request = Jabber::Presence.new
    request.type = :subscribe
    request.to   = jid
    @jabber.send(request)
  end

  def flush_deferred_queue(jid)
    return unless subscribed_to?(jid)
    pending = @deferred.delete(jid) || []
    pending.each do |msg|
      send_message(msg)
    end
  end

  def message_received(msg)
    puts "Received message from #{msg.from}: #{msg.body.inspect}"
  end
end

class JabberBot::Server
  def initialize(client, uri)
    @client = client
    @uri    = uri
  end

  def start
    DRb.start_service(@uri, self)
  end

  def thread
    DRb.thread
  end

  def deliver(email, message)
    @client.deliver(email, message)
  end
end

JabberBot.launch_config(*ARGV)
